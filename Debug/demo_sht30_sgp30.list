
demo_sht30_sgp30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002fe0  08002fe0  00003fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800300c  0800300c  000055fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800300c  0800300c  000055fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800300c  0800300c  000055fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800300c  0800300c  0000400c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003010  08003010  00004010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005fc  20000000  08003014  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  200005fc  08003610  000055fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  08003610  00005670  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000055fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c7d  00000000  00000000  00005625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b22  00000000  00000000  0000c2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  0000ddc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000062c  00000000  00000000  0000e618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c41  00000000  00000000  0000ec44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c56d  00000000  00000000  00025885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007eb57  00000000  00000000  00031df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0949  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002088  00000000  00000000  000b098c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000b2a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200005fc 	.word	0x200005fc
 800012c:	00000000 	.word	0x00000000
 8000130:	08002fc8 	.word	0x08002fc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000600 	.word	0x20000600
 800014c:	08002fc8 	.word	0x08002fc8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	@ 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_f2uiz>:
 8000ba8:	0042      	lsls	r2, r0, #1
 8000baa:	d20e      	bcs.n	8000bca <__aeabi_f2uiz+0x22>
 8000bac:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000bb0:	d30b      	bcc.n	8000bca <__aeabi_f2uiz+0x22>
 8000bb2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000bb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bba:	d409      	bmi.n	8000bd0 <__aeabi_f2uiz+0x28>
 8000bbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc8:	4770      	bx	lr
 8000bca:	f04f 0000 	mov.w	r0, #0
 8000bce:	4770      	bx	lr
 8000bd0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000bd4:	d101      	bne.n	8000bda <__aeabi_f2uiz+0x32>
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	d102      	bne.n	8000be0 <__aeabi_f2uiz+0x38>
 8000bda:	f04f 30ff 	mov.w	r0, #4294967295
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <MX_GPIO_Init+0x90>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a1d      	ldr	r2, [pc, #116]	@ (8000c78 <MX_GPIO_Init+0x90>)
 8000c02:	f043 0320 	orr.w	r3, r3, #32
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <MX_GPIO_Init+0x90>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0320 	and.w	r3, r3, #32
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <MX_GPIO_Init+0x90>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a17      	ldr	r2, [pc, #92]	@ (8000c78 <MX_GPIO_Init+0x90>)
 8000c1a:	f043 0308 	orr.w	r3, r3, #8
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <MX_GPIO_Init+0x90>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0308 	and.w	r3, r3, #8
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <MX_GPIO_Init+0x90>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a11      	ldr	r2, [pc, #68]	@ (8000c78 <MX_GPIO_Init+0x90>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <MX_GPIO_Init+0x90>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000c4a:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <MX_GPIO_Init+0x94>)
 8000c4c:	f001 f8df 	bl	8001e0e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c50:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c56:	2311      	movs	r3, #17
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	4619      	mov	r1, r3
 8000c68:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <MX_GPIO_Init+0x94>)
 8000c6a:	f000 ff35 	bl	8001ad8 <HAL_GPIO_Init>

}
 8000c6e:	bf00      	nop
 8000c70:	3720      	adds	r7, #32
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000c86:	4a13      	ldr	r2, [pc, #76]	@ (8000cd4 <MX_I2C1_Init+0x54>)
 8000c88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000c8c:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <MX_I2C1_Init+0x58>)
 8000c8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000c9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ca2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cbc:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000cbe:	f001 f8bf 	bl	8001e40 <HAL_I2C_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc8:	f000 f8e7 	bl	8000e9a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000618 	.word	0x20000618
 8000cd4:	40005400 	.word	0x40005400
 8000cd8:	000186a0 	.word	0x000186a0

08000cdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a15      	ldr	r2, [pc, #84]	@ (8000d4c <HAL_I2C_MspInit+0x70>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d123      	bne.n	8000d44 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <HAL_I2C_MspInit+0x74>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a13      	ldr	r2, [pc, #76]	@ (8000d50 <HAL_I2C_MspInit+0x74>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <HAL_I2C_MspInit+0x74>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d14:	23c0      	movs	r3, #192	@ 0xc0
 8000d16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d18:	2312      	movs	r3, #18
 8000d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4619      	mov	r1, r3
 8000d26:	480b      	ldr	r0, [pc, #44]	@ (8000d54 <HAL_I2C_MspInit+0x78>)
 8000d28:	f000 fed6 	bl	8001ad8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <HAL_I2C_MspInit+0x74>)
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	4a07      	ldr	r2, [pc, #28]	@ (8000d50 <HAL_I2C_MspInit+0x74>)
 8000d32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d36:	61d3      	str	r3, [r2, #28]
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <HAL_I2C_MspInit+0x74>)
 8000d3a:	69db      	ldr	r3, [r3, #28]
 8000d3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d44:	bf00      	nop
 8000d46:	3720      	adds	r7, #32
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010c00 	.word	0x40010c00

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5e:	f000 fd75 	bl	800184c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d62:	f000 f855 	bl	8000e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d66:	f7ff ff3f 	bl	8000be8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d6a:	f7ff ff89 	bl	8000c80 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	SHT30_TypeDef sht30 = { 0 };
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
	SGP30_TypeDef sgp30 = { 0 };
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	811a      	strh	r2, [r3, #8]

	OLED_Init();
 8000d86:	f000 fb9f 	bl	80014c8 <OLED_Init>
	SHT30_Init();
 8000d8a:	f000 fc72 	bl	8001672 <SHT30_Init>
	SGP30_Init();
 8000d8e:	f000 fbd7 	bl	8001540 <SGP30_Init>
	SHT30_Set_Periodic_Data_Acquisition_Mode(0x21, 0x30);
 8000d92:	2130      	movs	r1, #48	@ 0x30
 8000d94:	2021      	movs	r0, #33	@ 0x21
 8000d96:	f000 fd47 	bl	8001828 <SHT30_Set_Periodic_Data_Acquisition_Mode>
	SGP30_IAQ_Init();
 8000d9a:	f000 fc62 	bl	8001662 <SGP30_IAQ_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		OLED_ShowNum(1, 1, SystemCoreClock, 8);
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <main+0xb4>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	2308      	movs	r3, #8
 8000da4:	2101      	movs	r1, #1
 8000da6:	2001      	movs	r0, #1
 8000da8:	f000 fb50 	bl	800144c <OLED_ShowNum>

		SHT30_Measure_Periodic_Mode(&sht30);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fc85 	bl	80016c0 <SHT30_Measure_Periodic_Mode>
		SGP30_Measure_IAQ(&sgp30);
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fbe6 	bl	800158a <SGP30_Measure_IAQ>

		OLED_ShowNum(3, 1, sht30.temp, 4);
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fef1 	bl	8000ba8 <__aeabi_f2uiz>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	2304      	movs	r3, #4
 8000dca:	2101      	movs	r1, #1
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f000 fb3d 	bl	800144c <OLED_ShowNum>
		OLED_ShowNum(4, 1, sht30.hum, 4);
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fee7 	bl	8000ba8 <__aeabi_f2uiz>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	2304      	movs	r3, #4
 8000dde:	2101      	movs	r1, #1
 8000de0:	2004      	movs	r0, #4
 8000de2:	f000 fb33 	bl	800144c <OLED_ShowNum>
		OLED_ShowNum(3, 7, sgp30.co2eq, 4);
 8000de6:	897b      	ldrh	r3, [r7, #10]
 8000de8:	461a      	mov	r2, r3
 8000dea:	2304      	movs	r3, #4
 8000dec:	2107      	movs	r1, #7
 8000dee:	2003      	movs	r0, #3
 8000df0:	f000 fb2c 	bl	800144c <OLED_ShowNum>
		OLED_ShowNum(4, 7, sgp30.tvoc, 4);
 8000df4:	89bb      	ldrh	r3, [r7, #12]
 8000df6:	461a      	mov	r2, r3
 8000df8:	2304      	movs	r3, #4
 8000dfa:	2107      	movs	r1, #7
 8000dfc:	2004      	movs	r0, #4
 8000dfe:	f000 fb25 	bl	800144c <OLED_ShowNum>
		Delay_s(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f000 f8f3 	bl	8000fee <Delay_s>
		OLED_ShowNum(1, 1, SystemCoreClock, 8);
 8000e08:	bf00      	nop
 8000e0a:	e7c8      	b.n	8000d9e <main+0x46>
 8000e0c:	20000000 	.word	0x20000000

08000e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b090      	sub	sp, #64	@ 0x40
 8000e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e16:	f107 0318 	add.w	r3, r7, #24
 8000e1a:	2228      	movs	r2, #40	@ 0x28
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 f8a6 	bl	8002f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e32:	2301      	movs	r3, #1
 8000e34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e40:	2301      	movs	r3, #1
 8000e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e44:	2302      	movs	r3, #2
 8000e46:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e4e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 fc8d 	bl	8002778 <HAL_RCC_OscConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e64:	f000 f819 	bl	8000e9a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e68:	230f      	movs	r3, #15
 8000e6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2102      	movs	r1, #2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 fefa 	bl	8002c7c <HAL_RCC_ClockConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e8e:	f000 f804 	bl	8000e9a <Error_Handler>
  }
}
 8000e92:	bf00      	nop
 8000e94:	3740      	adds	r7, #64	@ 0x40
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9e:	b672      	cpsid	i
}
 8000ea0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ea2:	bf00      	nop
 8000ea4:	e7fd      	b.n	8000ea2 <Error_Handler+0x8>
	...

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <HAL_MspInit+0x5c>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <HAL_MspInit+0x5c>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6193      	str	r3, [r2, #24]
 8000eba:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_MspInit+0x5c>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <HAL_MspInit+0x5c>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <HAL_MspInit+0x5c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <HAL_MspInit+0x5c>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <HAL_MspInit+0x60>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <HAL_MspInit+0x60>)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010000 	.word	0x40010000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <NMI_Handler+0x4>

08000f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <MemManage_Handler+0x4>

08000f24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5c:	f000 fcbc 	bl	80018d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <Delay_us>:
/**
 * @brief  Microsecond delay
 * @param  Delay specifies the delay time length, in microseconds.
 * @retval None
 */
void Delay_us(uint32_t us) {
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	if (us > 0) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d017      	beq.n	8000fae <Delay_us+0x3e>
		SysTick->LOAD = SYSTICK_LOAD * us;		 // Set systick reload value
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <Delay_us+0x48>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a0e      	ldr	r2, [pc, #56]	@ (8000fbc <Delay_us+0x4c>)
 8000f84:	fba2 2303 	umull	r2, r3, r2, r3
 8000f88:	0c9b      	lsrs	r3, r3, #18
 8000f8a:	490d      	ldr	r1, [pc, #52]	@ (8000fc0 <Delay_us+0x50>)
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	fb02 f303 	mul.w	r3, r2, r3
 8000f92:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0x00;				  // Set SysTick Current Value to 0
 8000f94:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <Delay_us+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
		SysTick->CTRL = 0x00000005;	// Set SysTick clock source to use processor clock and enable timer
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <Delay_us+0x50>)
 8000f9c:	2205      	movs	r2, #5
 8000f9e:	601a      	str	r2, [r3, #0]
		while (!(SysTick->CTRL & 0x00010000)) // Wait for the timer to count to 0
 8000fa0:	bf00      	nop
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <Delay_us+0x50>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f9      	beq.n	8000fa2 <Delay_us+0x32>
		{
		}
//		SysTick->CTRL = 0x00000004; // Disable timer
	}
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	431bde83 	.word	0x431bde83
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <Delay_ms>:
/**
 * @brief  Millisecond delay
 * @param  Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
void Delay_ms(uint32_t ms) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	if (ms > 0) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d009      	beq.n	8000fe6 <Delay_ms+0x22>
		while (ms--) {
 8000fd2:	e003      	b.n	8000fdc <Delay_ms+0x18>
			Delay_us(1000);
 8000fd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fd8:	f7ff ffca 	bl	8000f70 <Delay_us>
		while (ms--) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	1e5a      	subs	r2, r3, #1
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f6      	bne.n	8000fd4 <Delay_ms+0x10>
		}
	}
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <Delay_s>:
/**
 * @brief  Second delay
 * @param  Delay specifies the delay time length, in seconds.
 * @retval None
 */
void Delay_s(uint32_t s) {
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
	if (s > 0) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d009      	beq.n	8001010 <Delay_s+0x22>
		while (s--) {
 8000ffc:	e003      	b.n	8001006 <Delay_s+0x18>
			Delay_ms(1000);
 8000ffe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001002:	f7ff ffdf 	bl	8000fc4 <Delay_ms>
		while (s--) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	1e5a      	subs	r2, r3, #1
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f6      	bne.n	8000ffe <Delay_s+0x10>
		}
	}
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001018:	f7ff ffa4 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800101c:	480b      	ldr	r0, [pc, #44]	@ (800104c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800101e:	490c      	ldr	r1, [pc, #48]	@ (8001050 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001020:	4a0c      	ldr	r2, [pc, #48]	@ (8001054 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a09      	ldr	r2, [pc, #36]	@ (8001058 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001034:	4c09      	ldr	r4, [pc, #36]	@ (800105c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001042:	f001 ff9d 	bl	8002f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001046:	f7ff fe87 	bl	8000d58 <main>
  bx lr
 800104a:	4770      	bx	lr
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	200005fc 	.word	0x200005fc
  ldr r2, =_sidata
 8001054:	08003014 	.word	0x08003014
  ldr r2, =_sbss
 8001058:	200005fc 	.word	0x200005fc
  ldr r4, =_ebss
 800105c:	20000670 	.word	0x20000670

08001060 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC1_2_IRQHandler>
	...

08001064 <SW_I2C_Start>:
 * @brief I2C start condition
 * @param None
 * @retval None
 */
void SW_I2C_Start(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	// pull up SCL,SDA for start
	SW_I2C_SDA_WriteBit(1);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800106e:	4810      	ldr	r0, [pc, #64]	@ (80010b0 <SW_I2C_Start+0x4c>)
 8001070:	f000 fecd 	bl	8001e0e <HAL_GPIO_WritePin>
	SW_I2C_SCL_WriteBit(1);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107a:	480d      	ldr	r0, [pc, #52]	@ (80010b0 <SW_I2C_Start+0x4c>)
 800107c:	f000 fec7 	bl	8001e0e <HAL_GPIO_WritePin>
	SW_I2C_Delay();
 8001080:	2005      	movs	r0, #5
 8001082:	f7ff ff75 	bl	8000f70 <Delay_us>

	// I2C start
	SW_I2C_SDA_WriteBit(0);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800108c:	4808      	ldr	r0, [pc, #32]	@ (80010b0 <SW_I2C_Start+0x4c>)
 800108e:	f000 febe 	bl	8001e0e <HAL_GPIO_WritePin>
	SW_I2C_Delay();
 8001092:	2005      	movs	r0, #5
 8001094:	f7ff ff6c 	bl	8000f70 <Delay_us>
	SW_I2C_SCL_WriteBit(0);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800109e:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <SW_I2C_Start+0x4c>)
 80010a0:	f000 feb5 	bl	8001e0e <HAL_GPIO_WritePin>
	SW_I2C_Delay();
 80010a4:	2005      	movs	r0, #5
 80010a6:	f7ff ff63 	bl	8000f70 <Delay_us>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40010c00 	.word	0x40010c00

080010b4 <SW_I2C_Stop>:
 * @brief  I2C stop condition
 * @param none
 * @retval None
 */
void SW_I2C_Stop(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	// pull down SDA for stop
	SW_I2C_SDA_WriteBit(0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010be:	480d      	ldr	r0, [pc, #52]	@ (80010f4 <SW_I2C_Stop+0x40>)
 80010c0:	f000 fea5 	bl	8001e0e <HAL_GPIO_WritePin>
	SW_I2C_Delay();
 80010c4:	2005      	movs	r0, #5
 80010c6:	f7ff ff53 	bl	8000f70 <Delay_us>

	// I2C stop
	SW_I2C_SCL_WriteBit(1);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010d0:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <SW_I2C_Stop+0x40>)
 80010d2:	f000 fe9c 	bl	8001e0e <HAL_GPIO_WritePin>
	SW_I2C_Delay();
 80010d6:	2005      	movs	r0, #5
 80010d8:	f7ff ff4a 	bl	8000f70 <Delay_us>
	SW_I2C_SDA_WriteBit(1);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010e2:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <SW_I2C_Stop+0x40>)
 80010e4:	f000 fe93 	bl	8001e0e <HAL_GPIO_WritePin>
	SW_I2C_Delay();
 80010e8:	2005      	movs	r0, #5
 80010ea:	f7ff ff41 	bl	8000f70 <Delay_us>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40010c00 	.word	0x40010c00

080010f8 <SW_I2C_TransmitByte>:
 * @brief Transmit one byte using I2C
 * @param Byte
 * @retval ACK
 */
uint8_t SW_I2C_TransmitByte(uint8_t Byte)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	uint8_t ack = 1;
 8001102:	2301      	movs	r3, #1
 8001104:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 8; i++)
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
 800110a:	e030      	b.n	800116e <SW_I2C_TransmitByte+0x76>
	{
		SW_I2C_SDA_WriteBit((Byte & (0x80 >> i)));
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	2280      	movs	r2, #128	@ 0x80
 8001110:	fa42 f303 	asr.w	r3, r2, r3
 8001114:	b25a      	sxtb	r2, r3
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	4013      	ands	r3, r2
 800111c:	b25b      	sxtb	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001126:	4824      	ldr	r0, [pc, #144]	@ (80011b8 <SW_I2C_TransmitByte+0xc0>)
 8001128:	f000 fe71 	bl	8001e0e <HAL_GPIO_WritePin>
		SW_I2C_Delay();
 800112c:	2005      	movs	r0, #5
 800112e:	f7ff ff1f 	bl	8000f70 <Delay_us>
		SW_I2C_SCL_WriteBit(1);
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001138:	481f      	ldr	r0, [pc, #124]	@ (80011b8 <SW_I2C_TransmitByte+0xc0>)
 800113a:	f000 fe68 	bl	8001e0e <HAL_GPIO_WritePin>
		SW_I2C_Delay();
 800113e:	2005      	movs	r0, #5
 8001140:	f7ff ff16 	bl	8000f70 <Delay_us>
		SW_I2C_SCL_WriteBit(0);
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800114a:	481b      	ldr	r0, [pc, #108]	@ (80011b8 <SW_I2C_TransmitByte+0xc0>)
 800114c:	f000 fe5f 	bl	8001e0e <HAL_GPIO_WritePin>
		if (i == 7)
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b07      	cmp	r3, #7
 8001154:	d105      	bne.n	8001162 <SW_I2C_TransmitByte+0x6a>
		{
			// release SDA
			SW_I2C_SDA_WriteBit(1);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800115c:	4816      	ldr	r0, [pc, #88]	@ (80011b8 <SW_I2C_TransmitByte+0xc0>)
 800115e:	f000 fe56 	bl	8001e0e <HAL_GPIO_WritePin>
		}
		SW_I2C_Delay();
 8001162:	2005      	movs	r0, #5
 8001164:	f7ff ff04 	bl	8000f70 <Delay_us>
	for (uint8_t i = 0; i < 8; i++)
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	3301      	adds	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	2b07      	cmp	r3, #7
 8001172:	d9cb      	bls.n	800110c <SW_I2C_TransmitByte+0x14>
	}
	// receive ACK
	SW_I2C_Delay();
 8001174:	2005      	movs	r0, #5
 8001176:	f7ff fefb 	bl	8000f70 <Delay_us>
	SW_I2C_SCL_WriteBit(1);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001180:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <SW_I2C_TransmitByte+0xc0>)
 8001182:	f000 fe44 	bl	8001e0e <HAL_GPIO_WritePin>
	ack = SW_I2C_SDA_ReadBit();
 8001186:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800118a:	480b      	ldr	r0, [pc, #44]	@ (80011b8 <SW_I2C_TransmitByte+0xc0>)
 800118c:	f000 fe28 	bl	8001de0 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	73bb      	strb	r3, [r7, #14]
	SW_I2C_Delay();
 8001194:	2005      	movs	r0, #5
 8001196:	f7ff feeb 	bl	8000f70 <Delay_us>
	SW_I2C_SCL_WriteBit(0);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011a0:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <SW_I2C_TransmitByte+0xc0>)
 80011a2:	f000 fe34 	bl	8001e0e <HAL_GPIO_WritePin>
	SW_I2C_Delay();
 80011a6:	2005      	movs	r0, #5
 80011a8:	f7ff fee2 	bl	8000f70 <Delay_us>
	return ack;
 80011ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40010c00 	.word	0x40010c00

080011bc <SW_I2C_ReceiveByte>:
 * @brief Receive one byte using I2C
 * @param ACK
 * @retval Byte or ACK
 */
uint8_t SW_I2C_ReceiveByte(uint8_t ACK)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	uint8_t byte = 0x00;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 8; i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	73bb      	strb	r3, [r7, #14]
 80011ce:	e029      	b.n	8001224 <SW_I2C_ReceiveByte+0x68>
	{
		SW_I2C_Delay();
 80011d0:	2005      	movs	r0, #5
 80011d2:	f7ff fecd 	bl	8000f70 <Delay_us>
		SW_I2C_SCL_WriteBit(1);
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011dc:	4826      	ldr	r0, [pc, #152]	@ (8001278 <SW_I2C_ReceiveByte+0xbc>)
 80011de:	f000 fe16 	bl	8001e0e <HAL_GPIO_WritePin>
		if (SW_I2C_SDA_ReadBit() == 1)
 80011e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011e6:	4824      	ldr	r0, [pc, #144]	@ (8001278 <SW_I2C_ReceiveByte+0xbc>)
 80011e8:	f000 fdfa 	bl	8001de0 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d109      	bne.n	8001206 <SW_I2C_ReceiveByte+0x4a>
		{
			byte |= (0x80 >> i);
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	fa42 f303 	asr.w	r3, r2, r3
 80011fa:	b25a      	sxtb	r2, r3
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	4313      	orrs	r3, r2
 8001202:	b25b      	sxtb	r3, r3
 8001204:	73fb      	strb	r3, [r7, #15]
		}
		SW_I2C_Delay();
 8001206:	2005      	movs	r0, #5
 8001208:	f7ff feb2 	bl	8000f70 <Delay_us>
		SW_I2C_SCL_WriteBit(0);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001212:	4819      	ldr	r0, [pc, #100]	@ (8001278 <SW_I2C_ReceiveByte+0xbc>)
 8001214:	f000 fdfb 	bl	8001e0e <HAL_GPIO_WritePin>
		SW_I2C_Delay();
 8001218:	2005      	movs	r0, #5
 800121a:	f7ff fea9 	bl	8000f70 <Delay_us>
	for (uint8_t i = 0; i < 8; i++)
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	3301      	adds	r3, #1
 8001222:	73bb      	strb	r3, [r7, #14]
 8001224:	7bbb      	ldrb	r3, [r7, #14]
 8001226:	2b07      	cmp	r3, #7
 8001228:	d9d2      	bls.n	80011d0 <SW_I2C_ReceiveByte+0x14>
	}
	// transmit ACK
	SW_I2C_SDA_WriteBit(ACK);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	461a      	mov	r2, r3
 800122e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001232:	4811      	ldr	r0, [pc, #68]	@ (8001278 <SW_I2C_ReceiveByte+0xbc>)
 8001234:	f000 fdeb 	bl	8001e0e <HAL_GPIO_WritePin>
	SW_I2C_Delay();
 8001238:	2005      	movs	r0, #5
 800123a:	f7ff fe99 	bl	8000f70 <Delay_us>
	SW_I2C_SCL_WriteBit(1);
 800123e:	2201      	movs	r2, #1
 8001240:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001244:	480c      	ldr	r0, [pc, #48]	@ (8001278 <SW_I2C_ReceiveByte+0xbc>)
 8001246:	f000 fde2 	bl	8001e0e <HAL_GPIO_WritePin>
	SW_I2C_Delay();
 800124a:	2005      	movs	r0, #5
 800124c:	f7ff fe90 	bl	8000f70 <Delay_us>
	SW_I2C_SCL_WriteBit(0);
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001256:	4808      	ldr	r0, [pc, #32]	@ (8001278 <SW_I2C_ReceiveByte+0xbc>)
 8001258:	f000 fdd9 	bl	8001e0e <HAL_GPIO_WritePin>
	// release SDA
	SW_I2C_SDA_WriteBit(1);
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <SW_I2C_ReceiveByte+0xbc>)
 8001264:	f000 fdd3 	bl	8001e0e <HAL_GPIO_WritePin>
	SW_I2C_Delay();
 8001268:	2005      	movs	r0, #5
 800126a:	f7ff fe81 	bl	8000f70 <Delay_us>
	return byte;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40010c00 	.word	0x40010c00

0800127c <SSD1306_WriteCommand>:

/*************************************************************************************************/

/*SSD1306 hardware implement*/

void SSD1306_WriteCommand(uint8_t Command) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af02      	add	r7, sp, #8
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	uint8_t data_buffer[2] = { SSD1306_Control_Command, Command };
 8001286:	2300      	movs	r3, #0
 8001288:	733b      	strb	r3, [r7, #12]
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, SSD1306_Slave_Address, data_buffer, 2, 100);
 800128e:	f107 020c 	add.w	r2, r7, #12
 8001292:	2364      	movs	r3, #100	@ 0x64
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2302      	movs	r3, #2
 8001298:	2178      	movs	r1, #120	@ 0x78
 800129a:	4803      	ldr	r0, [pc, #12]	@ (80012a8 <SSD1306_WriteCommand+0x2c>)
 800129c:	f000 ff14 	bl	80020c8 <HAL_I2C_Master_Transmit>
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000618 	.word	0x20000618

080012ac <SSD1306_WriteData>:

void SSD1306_WriteData(uint8_t Data) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
	uint8_t data_buffer[2] = { SSD1306_Control_Data, Data };
 80012b6:	2340      	movs	r3, #64	@ 0x40
 80012b8:	733b      	strb	r3, [r7, #12]
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, SSD1306_Slave_Address, data_buffer, 2, 100);
 80012be:	f107 020c 	add.w	r2, r7, #12
 80012c2:	2364      	movs	r3, #100	@ 0x64
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2302      	movs	r3, #2
 80012c8:	2178      	movs	r1, #120	@ 0x78
 80012ca:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <SSD1306_WriteData+0x2c>)
 80012cc:	f000 fefc 	bl	80020c8 <HAL_I2C_Master_Transmit>
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000618 	.word	0x20000618

080012dc <OLED_SetCursor>:
 * @brief  OLED sets cursor position
 * @param  Y With the upper left corner as the origin, downward direction coordinates, range: 0-7
 * @param  X With the upper left corner as the origin, the coordinates in the right direction, range 0-127
 * @retval None
 */
void OLED_SetCursor(uint8_t Y, uint8_t X) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	460a      	mov	r2, r1
 80012e6:	71fb      	strb	r3, [r7, #7]
 80012e8:	4613      	mov	r3, r2
 80012ea:	71bb      	strb	r3, [r7, #6]
	SSD1306_WriteCommand(0xB0 | Y);						// Set Y position
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ffc1 	bl	800127c <SSD1306_WriteCommand>
	SSD1306_WriteCommand(0x10 | ((X & 0xF0) >> 4));	// Set X position 4 bits higher
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ffb8 	bl	800127c <SSD1306_WriteCommand>
	SSD1306_WriteCommand(SSD1306_Control_Command | (X & 0x0F)); // Set X position 4 bits lower
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ffb1 	bl	800127c <SSD1306_WriteCommand>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <OLED_Clear>:
/**
 * @brief  OLED clear screen
 * @param  None
 * @retval None
 */
void OLED_Clear(void) {
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++) {
 8001328:	2300      	movs	r3, #0
 800132a:	71bb      	strb	r3, [r7, #6]
 800132c:	e014      	b.n	8001358 <OLED_Clear+0x36>
		OLED_SetCursor(j, 0);
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ffd2 	bl	80012dc <OLED_SetCursor>
		for (i = 0; i < 128; i++) {
 8001338:	2300      	movs	r3, #0
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	e005      	b.n	800134a <OLED_Clear+0x28>
			SSD1306_WriteData(SSD1306_Control_Command);
 800133e:	2000      	movs	r0, #0
 8001340:	f7ff ffb4 	bl	80012ac <SSD1306_WriteData>
		for (i = 0; i < 128; i++) {
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	3301      	adds	r3, #1
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	daf5      	bge.n	800133e <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++) {
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	3301      	adds	r3, #1
 8001356:	71bb      	strb	r3, [r7, #6]
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	2b07      	cmp	r3, #7
 800135c:	d9e7      	bls.n	800132e <OLED_Clear+0xc>
		}
	}
}
 800135e:	bf00      	nop
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <OLED_ShowChar>:
 * @param  Line Line position, value range 1-4
 * @param  Column Column position, value range 1-16
 * @param  Char A character to display, range: ASCII characters
 * @retval None
 */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	460b      	mov	r3, r1
 8001374:	71bb      	strb	r3, [r7, #6]
 8001376:	4613      	mov	r3, r2
 8001378:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8); // Set the cursor position in the top half
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	3b01      	subs	r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	b2da      	uxtb	r2, r3
 8001384:	79bb      	ldrb	r3, [r7, #6]
 8001386:	3b01      	subs	r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	4619      	mov	r1, r3
 8001390:	4610      	mov	r0, r2
 8001392:	f7ff ffa3 	bl	80012dc <OLED_SetCursor>
	for (i = 0; i < 8; i++) {
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	e00e      	b.n	80013ba <OLED_ShowChar+0x52>
		SSD1306_WriteData(Font8x16[Char - ' '][i]); // Displays the top half of the content
 800139c:	797b      	ldrb	r3, [r7, #5]
 800139e:	f1a3 0220 	sub.w	r2, r3, #32
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	491c      	ldr	r1, [pc, #112]	@ (8001418 <OLED_ShowChar+0xb0>)
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	440a      	add	r2, r1
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff7c 	bl	80012ac <SSD1306_WriteData>
	for (i = 0; i < 8; i++) {
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	3301      	adds	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	2b07      	cmp	r3, #7
 80013be:	d9ed      	bls.n	800139c <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8); // Set the cursor position in the bottom half
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	3301      	adds	r3, #1
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	79bb      	ldrb	r3, [r7, #6]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	4619      	mov	r1, r3
 80013da:	4610      	mov	r0, r2
 80013dc:	f7ff ff7e 	bl	80012dc <OLED_SetCursor>
	for (i = 0; i < 8; i++) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e00f      	b.n	8001406 <OLED_ShowChar+0x9e>
		SSD1306_WriteData(Font8x16[Char - ' '][i + 8]); // Displays the bottom half of the content
 80013e6:	797b      	ldrb	r3, [r7, #5]
 80013e8:	f1a3 0220 	sub.w	r2, r3, #32
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	3308      	adds	r3, #8
 80013f0:	4909      	ldr	r1, [pc, #36]	@ (8001418 <OLED_ShowChar+0xb0>)
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	440a      	add	r2, r1
 80013f6:	4413      	add	r3, r2
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff56 	bl	80012ac <SSD1306_WriteData>
	for (i = 0; i < 8; i++) {
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	3301      	adds	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	2b07      	cmp	r3, #7
 800140a:	d9ec      	bls.n	80013e6 <OLED_ShowChar+0x7e>
	}
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000004 	.word	0x20000004

0800141c <OLED_Pow>:

/**
 * @brief  OLED power function
 * @retval The return value is equal to X to the Y power
 */
uint32_t OLED_Pow(uint32_t X, uint32_t Y) {
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
	uint32_t Result = 1;
 8001426:	2301      	movs	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
	while (Y--) {
 800142a:	e004      	b.n	8001436 <OLED_Pow+0x1a>
		Result *= X;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	fb02 f303 	mul.w	r3, r2, r3
 8001434:	60fb      	str	r3, [r7, #12]
	while (Y--) {
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	1e5a      	subs	r2, r3, #1
 800143a:	603a      	str	r2, [r7, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f5      	bne.n	800142c <OLED_Pow+0x10>
	}
	return Result;
 8001440:	68fb      	ldr	r3, [r7, #12]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <OLED_ShowNum>:
 * @param  Column Column position, range 1-16
 * @param  Number The number to display
 * @param  Length To display the length of the number, the value ranges from 1 to 10
 * @retval None
 */
void OLED_ShowNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length) {
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	603a      	str	r2, [r7, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	460b      	mov	r3, r1
 800145c:	71bb      	strb	r3, [r7, #6]
 800145e:	4613      	mov	r3, r2
 8001460:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < Length; i++) {
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e023      	b.n	80014b0 <OLED_ShowNum+0x64>
		OLED_ShowChar(Line, Column + i,
 8001468:	79ba      	ldrb	r2, [r7, #6]
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	4413      	add	r3, r2
 800146e:	b2dc      	uxtb	r4, r3
				Number / OLED_Pow(10, Length - i - 1) % 10 + '0');
 8001470:	797a      	ldrb	r2, [r7, #5]
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	3b01      	subs	r3, #1
 8001478:	4619      	mov	r1, r3
 800147a:	200a      	movs	r0, #10
 800147c:	f7ff ffce 	bl	800141c <OLED_Pow>
 8001480:	4602      	mov	r2, r0
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	fbb3 f1f2 	udiv	r1, r3, r2
 8001488:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <OLED_ShowNum+0x78>)
 800148a:	fba3 2301 	umull	r2, r3, r3, r1
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	1aca      	subs	r2, r1, r3
		OLED_ShowChar(Line, Column + i,
 800149a:	b2d3      	uxtb	r3, r2
 800149c:	3330      	adds	r3, #48	@ 0x30
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	4621      	mov	r1, r4
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5f 	bl	8001368 <OLED_ShowChar>
	for (i = 0; i < Length; i++) {
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	3301      	adds	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	797b      	ldrb	r3, [r7, #5]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d3d7      	bcc.n	8001468 <OLED_ShowNum+0x1c>
	}
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd90      	pop	{r4, r7, pc}
 80014c2:	bf00      	nop
 80014c4:	cccccccd 	.word	0xcccccccd

080014c8 <OLED_Init>:
/**
 * @brief  Initializes the OLED
 * @param  None
 * @retval None
 */
void OLED_Init(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	// software configuration from SSD1306 Application Note
	SSD1306_WriteCommand(0xA8); // Set MUX Ratio
 80014cc:	20a8      	movs	r0, #168	@ 0xa8
 80014ce:	f7ff fed5 	bl	800127c <SSD1306_WriteCommand>
	SSD1306_WriteCommand(0x3F);
 80014d2:	203f      	movs	r0, #63	@ 0x3f
 80014d4:	f7ff fed2 	bl	800127c <SSD1306_WriteCommand>

	SSD1306_WriteCommand(0xD3); // Set Display Offset
 80014d8:	20d3      	movs	r0, #211	@ 0xd3
 80014da:	f7ff fecf 	bl	800127c <SSD1306_WriteCommand>
	SSD1306_WriteCommand(0x00);
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff fecc 	bl	800127c <SSD1306_WriteCommand>

	SSD1306_WriteCommand(0x40); // Set Display Start Line
 80014e4:	2040      	movs	r0, #64	@ 0x40
 80014e6:	f7ff fec9 	bl	800127c <SSD1306_WriteCommand>

	SSD1306_WriteCommand(0xA1); // Set Segment re-map
 80014ea:	20a1      	movs	r0, #161	@ 0xa1
 80014ec:	f7ff fec6 	bl	800127c <SSD1306_WriteCommand>

	SSD1306_WriteCommand(0xC8); // Set COM Output Scan Direction
 80014f0:	20c8      	movs	r0, #200	@ 0xc8
 80014f2:	f7ff fec3 	bl	800127c <SSD1306_WriteCommand>

	SSD1306_WriteCommand(0xDA); // Set COM Pins hardware configuration
 80014f6:	20da      	movs	r0, #218	@ 0xda
 80014f8:	f7ff fec0 	bl	800127c <SSD1306_WriteCommand>
	SSD1306_WriteCommand(0x12);
 80014fc:	2012      	movs	r0, #18
 80014fe:	f7ff febd 	bl	800127c <SSD1306_WriteCommand>

	SSD1306_WriteCommand(0x81); // Set Contrast Control
 8001502:	2081      	movs	r0, #129	@ 0x81
 8001504:	f7ff feba 	bl	800127c <SSD1306_WriteCommand>
	SSD1306_WriteCommand(0xCF);
 8001508:	20cf      	movs	r0, #207	@ 0xcf
 800150a:	f7ff feb7 	bl	800127c <SSD1306_WriteCommand>

	SSD1306_WriteCommand(0xA4); // Disable Entire Display On
 800150e:	20a4      	movs	r0, #164	@ 0xa4
 8001510:	f7ff feb4 	bl	800127c <SSD1306_WriteCommand>

	SSD1306_WriteCommand(0xA6); // Set Normal Display
 8001514:	20a6      	movs	r0, #166	@ 0xa6
 8001516:	f7ff feb1 	bl	800127c <SSD1306_WriteCommand>

	SSD1306_WriteCommand(0xD5); // Set Osc Frequency
 800151a:	20d5      	movs	r0, #213	@ 0xd5
 800151c:	f7ff feae 	bl	800127c <SSD1306_WriteCommand>
	SSD1306_WriteCommand(0x80);
 8001520:	2080      	movs	r0, #128	@ 0x80
 8001522:	f7ff feab 	bl	800127c <SSD1306_WriteCommand>

	SSD1306_WriteCommand(0x8D); // Enable charge pump regulator
 8001526:	208d      	movs	r0, #141	@ 0x8d
 8001528:	f7ff fea8 	bl	800127c <SSD1306_WriteCommand>
	SSD1306_WriteCommand(0x14);
 800152c:	2014      	movs	r0, #20
 800152e:	f7ff fea5 	bl	800127c <SSD1306_WriteCommand>

	SSD1306_WriteCommand(0xAF); // Display On AFh
 8001532:	20af      	movs	r0, #175	@ 0xaf
 8001534:	f7ff fea2 	bl	800127c <SSD1306_WriteCommand>

	OLED_Clear(); // OLED Clear
 8001538:	f7ff fef3 	bl	8001322 <OLED_Clear>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <SGP30_Init>:
#include "sw_i2c.h"

#define SGP30_ADDRESS 0x58

void SGP30_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    Delay_ms(1); // Wait until the sensor enters idle state
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff fd3d 	bl	8000fc4 <Delay_ms>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}

0800154e <SGP30_WriteCommand>:

uint8_t SGP30_WriteCommand(uint8_t CMD_MSB, uint8_t CMD_LSB)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	460a      	mov	r2, r1
 8001558:	71fb      	strb	r3, [r7, #7]
 800155a:	4613      	mov	r3, r2
 800155c:	71bb      	strb	r3, [r7, #6]
    uint8_t ack;
    SW_I2C_Start();
 800155e:	f7ff fd81 	bl	8001064 <SW_I2C_Start>
    SW_I2C_TransmitByte(SGP30_ADDRESS << 1 | 0x00);
 8001562:	20b0      	movs	r0, #176	@ 0xb0
 8001564:	f7ff fdc8 	bl	80010f8 <SW_I2C_TransmitByte>
    SW_I2C_TransmitByte(CMD_MSB);
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fdc4 	bl	80010f8 <SW_I2C_TransmitByte>
    ack = SW_I2C_TransmitByte(CMD_LSB);
 8001570:	79bb      	ldrb	r3, [r7, #6]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fdc0 	bl	80010f8 <SW_I2C_TransmitByte>
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
    SW_I2C_Stop();
 800157c:	f7ff fd9a 	bl	80010b4 <SW_I2C_Stop>
    return ack;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <SGP30_Measure_IAQ>:

void SGP30_Measure_IAQ(SGP30_TypeDef *sgp30)
{
 800158a:	b590      	push	{r4, r7, lr}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
    uint16_t timeout = 200;
 8001592:	23c8      	movs	r3, #200	@ 0xc8
 8001594:	81fb      	strh	r3, [r7, #14]
    SW_I2C_Start();
 8001596:	f7ff fd65 	bl	8001064 <SW_I2C_Start>
    SW_I2C_TransmitByte(SGP30_ADDRESS << 1 | 0x00);
 800159a:	20b0      	movs	r0, #176	@ 0xb0
 800159c:	f7ff fdac 	bl	80010f8 <SW_I2C_TransmitByte>
    SW_I2C_TransmitByte(0x20);
 80015a0:	2020      	movs	r0, #32
 80015a2:	f7ff fda9 	bl	80010f8 <SW_I2C_TransmitByte>
    SW_I2C_TransmitByte(0x08);
 80015a6:	2008      	movs	r0, #8
 80015a8:	f7ff fda6 	bl	80010f8 <SW_I2C_TransmitByte>

    // measurement duration is 10 ms
    // i2c read header, if get nack, retry send
    SW_I2C_Start();
 80015ac:	f7ff fd5a 	bl	8001064 <SW_I2C_Start>
    while (SW_I2C_TransmitByte((SGP30_ADDRESS << 1) | 0x01))
 80015b0:	e01a      	b.n	80015e8 <SGP30_Measure_IAQ+0x5e>
    {
        SW_I2C_Start();
 80015b2:	f7ff fd57 	bl	8001064 <SW_I2C_Start>
        timeout--;
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	81fb      	strh	r3, [r7, #14]
        if (timeout == 0)
 80015bc:	89fb      	ldrh	r3, [r7, #14]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d112      	bne.n	80015e8 <SGP30_Measure_IAQ+0x5e>
        {
            sgp30->co2eq_raw = 0;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	801a      	strh	r2, [r3, #0]
            sgp30->tvoc_raw = 0;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	805a      	strh	r2, [r3, #2]
            sgp30->co2eq_crc = 0;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	711a      	strb	r2, [r3, #4]
            sgp30->tvoc_crc = 0;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	715a      	strb	r2, [r3, #5]
            sgp30->co2eq = 0;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	80da      	strh	r2, [r3, #6]
            sgp30->tvoc = 0;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	811a      	strh	r2, [r3, #8]
            return;
 80015e6:	e039      	b.n	800165c <SGP30_Measure_IAQ+0xd2>
    while (SW_I2C_TransmitByte((SGP30_ADDRESS << 1) | 0x01))
 80015e8:	20b1      	movs	r0, #177	@ 0xb1
 80015ea:	f7ff fd85 	bl	80010f8 <SW_I2C_TransmitByte>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1de      	bne.n	80015b2 <SGP30_Measure_IAQ+0x28>
        }
    }
    sgp30->co2eq = SW_I2C_ReceiveByte(0) << 8;
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff fde1 	bl	80011bc <SW_I2C_ReceiveByte>
 80015fa:	4603      	mov	r3, r0
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b29a      	uxth	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	80da      	strh	r2, [r3, #6]
    sgp30->co2eq = sgp30->co2eq | SW_I2C_ReceiveByte(0);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	88dc      	ldrh	r4, [r3, #6]
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff fdd7 	bl	80011bc <SW_I2C_ReceiveByte>
 800160e:	4603      	mov	r3, r0
 8001610:	4323      	orrs	r3, r4
 8001612:	b29a      	uxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	80da      	strh	r2, [r3, #6]
    sgp30->co2eq_crc = SW_I2C_ReceiveByte(0);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fdcf 	bl	80011bc <SW_I2C_ReceiveByte>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	711a      	strb	r2, [r3, #4]
    sgp30->tvoc = SW_I2C_ReceiveByte(0) << 8;
 8001626:	2000      	movs	r0, #0
 8001628:	f7ff fdc8 	bl	80011bc <SW_I2C_ReceiveByte>
 800162c:	4603      	mov	r3, r0
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	b29a      	uxth	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	811a      	strh	r2, [r3, #8]
    sgp30->tvoc = sgp30->tvoc | SW_I2C_ReceiveByte(0);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	891c      	ldrh	r4, [r3, #8]
 800163a:	2000      	movs	r0, #0
 800163c:	f7ff fdbe 	bl	80011bc <SW_I2C_ReceiveByte>
 8001640:	4603      	mov	r3, r0
 8001642:	4323      	orrs	r3, r4
 8001644:	b29a      	uxth	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	811a      	strh	r2, [r3, #8]
    sgp30->tvoc_crc = SW_I2C_ReceiveByte(1);
 800164a:	2001      	movs	r0, #1
 800164c:	f7ff fdb6 	bl	80011bc <SW_I2C_ReceiveByte>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	715a      	strb	r2, [r3, #5]
    SW_I2C_Stop();
 8001658:	f7ff fd2c 	bl	80010b4 <SW_I2C_Stop>
}
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bd90      	pop	{r4, r7, pc}

08001662 <SGP30_IAQ_Init>:
    SW_I2C_TransmitByte(Data_CRC);
    SW_I2C_Stop();
}

void SGP30_IAQ_Init(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0
    SGP30_WriteCommand(0x20, 0x03);
 8001666:	2103      	movs	r1, #3
 8001668:	2020      	movs	r0, #32
 800166a:	f7ff ff70 	bl	800154e <SGP30_WriteCommand>
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}

08001672 <SHT30_Init>:
#define SHT30_ADDRESS 0x44
#define SHT30_CLOCK_STRETCHING_ENABLE 0x2C

/*SHT30 use software I2C*/
void SHT30_Init(void)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	af00      	add	r7, sp, #0
    Delay_ms(1);
 8001676:	2001      	movs	r0, #1
 8001678:	f7ff fca4 	bl	8000fc4 <Delay_ms>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <SHT30_WriteCommand>:

uint8_t SHT30_WriteCommand(uint8_t CMD_MSB, uint8_t CMD_LSB)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	460a      	mov	r2, r1
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	4613      	mov	r3, r2
 800168e:	71bb      	strb	r3, [r7, #6]
    uint8_t ack;
    SW_I2C_Start();
 8001690:	f7ff fce8 	bl	8001064 <SW_I2C_Start>
    SW_I2C_TransmitByte(SHT30_ADDRESS << 1 | 0x00);
 8001694:	2088      	movs	r0, #136	@ 0x88
 8001696:	f7ff fd2f 	bl	80010f8 <SW_I2C_TransmitByte>
    SW_I2C_TransmitByte(CMD_MSB);
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fd2b 	bl	80010f8 <SW_I2C_TransmitByte>
    ack = SW_I2C_TransmitByte(CMD_LSB);
 80016a2:	79bb      	ldrb	r3, [r7, #6]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fd27 	bl	80010f8 <SW_I2C_TransmitByte>
 80016aa:	4603      	mov	r3, r0
 80016ac:	73fb      	strb	r3, [r7, #15]
    SW_I2C_Stop();
 80016ae:	f7ff fd01 	bl	80010b4 <SW_I2C_Stop>
    return ack;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	0000      	movs	r0, r0
	...

080016c0 <SHT30_Measure_Periodic_Mode>:

void SHT30_Measure_Periodic_Mode(SHT30_TypeDef *sht30)
{
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    SHT30_WriteCommand(0xE0, 0x00);
 80016c8:	2100      	movs	r1, #0
 80016ca:	20e0      	movs	r0, #224	@ 0xe0
 80016cc:	f7ff ffd8 	bl	8001680 <SHT30_WriteCommand>

    SW_I2C_Start();
 80016d0:	f7ff fcc8 	bl	8001064 <SW_I2C_Start>
    if (SW_I2C_TransmitByte((SHT30_ADDRESS << 1) | 0x01) == SW_I2C_None_ACK)
 80016d4:	2089      	movs	r0, #137	@ 0x89
 80016d6:	f7ff fd0f 	bl	80010f8 <SW_I2C_TransmitByte>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d114      	bne.n	800170a <SHT30_Measure_Periodic_Mode+0x4a>
    {
        sht30->temp_raw = 0;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	801a      	strh	r2, [r3, #0]
        sht30->temp_crc = 0;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	709a      	strb	r2, [r3, #2]
        sht30->hum_raw = 0;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	809a      	strh	r2, [r3, #4]
        sht30->hum_crc = 0;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	719a      	strb	r2, [r3, #6]
        sht30->temp = 0.0;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
        sht30->hum = 0.0;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
        return;
 8001708:	e07c      	b.n	8001804 <SHT30_Measure_Periodic_Mode+0x144>
    }
    sht30->temp_raw = SW_I2C_ReceiveByte(0) << 8;
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fd56 	bl	80011bc <SW_I2C_ReceiveByte>
 8001710:	4603      	mov	r3, r0
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b29a      	uxth	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	801a      	strh	r2, [r3, #0]
    sht30->temp_raw = sht30->temp_raw | SW_I2C_ReceiveByte(0);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	881c      	ldrh	r4, [r3, #0]
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff fd4c 	bl	80011bc <SW_I2C_ReceiveByte>
 8001724:	4603      	mov	r3, r0
 8001726:	4323      	orrs	r3, r4
 8001728:	b29a      	uxth	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	801a      	strh	r2, [r3, #0]
    sht30->temp_crc = SW_I2C_ReceiveByte(0);
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff fd44 	bl	80011bc <SW_I2C_ReceiveByte>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	709a      	strb	r2, [r3, #2]
    sht30->hum_raw = SW_I2C_ReceiveByte(0) << 8;
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff fd3d 	bl	80011bc <SW_I2C_ReceiveByte>
 8001742:	4603      	mov	r3, r0
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	b29a      	uxth	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	809a      	strh	r2, [r3, #4]
    sht30->hum_raw = sht30->hum_raw | SW_I2C_ReceiveByte(0);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	889c      	ldrh	r4, [r3, #4]
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff fd33 	bl	80011bc <SW_I2C_ReceiveByte>
 8001756:	4603      	mov	r3, r0
 8001758:	4323      	orrs	r3, r4
 800175a:	b29a      	uxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	809a      	strh	r2, [r3, #4]
    sht30->hum_crc = SW_I2C_ReceiveByte(1);
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff fd2b 	bl	80011bc <SW_I2C_ReceiveByte>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	719a      	strb	r2, [r3, #6]
    SW_I2C_Stop();
 800176e:	f7ff fca1 	bl	80010b4 <SW_I2C_Stop>

    sht30->temp = (-45.0 + (175.0 * (float)sht30->temp_raw / 65535.0));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff f9be 	bl	8000af8 <__aeabi_ui2f>
 800177c:	4603      	mov	r3, r0
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fe4a 	bl	8000418 <__aeabi_f2d>
 8001784:	a322      	add	r3, pc, #136	@ (adr r3, 8001810 <SHT30_Measure_Periodic_Mode+0x150>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7fe fe9d 	bl	80004c8 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	a320      	add	r3, pc, #128	@ (adr r3, 8001818 <SHT30_Measure_Periodic_Mode+0x158>)
 8001798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179c:	f7fe ffbe 	bl	800071c <__aeabi_ddiv>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <SHT30_Measure_Periodic_Mode+0x160>)
 80017ae:	f7fe fcd3 	bl	8000158 <__aeabi_dsub>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f897 	bl	80008ec <__aeabi_d2f>
 80017be:	4602      	mov	r2, r0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	609a      	str	r2, [r3, #8]
    sht30->hum = (100.0 * (float)sht30->hum_raw / 65535.0);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	889b      	ldrh	r3, [r3, #4]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff f995 	bl	8000af8 <__aeabi_ui2f>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fe21 	bl	8000418 <__aeabi_f2d>
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <SHT30_Measure_Periodic_Mode+0x164>)
 80017dc:	f7fe fe74 	bl	80004c8 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	a30b      	add	r3, pc, #44	@ (adr r3, 8001818 <SHT30_Measure_Periodic_Mode+0x158>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe ff95 	bl	800071c <__aeabi_ddiv>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	f7ff f877 	bl	80008ec <__aeabi_d2f>
 80017fe:	4602      	mov	r2, r0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	60da      	str	r2, [r3, #12]
}
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	bf00      	nop
 800180c:	f3af 8000 	nop.w
 8001810:	00000000 	.word	0x00000000
 8001814:	4065e000 	.word	0x4065e000
 8001818:	00000000 	.word	0x00000000
 800181c:	40efffe0 	.word	0x40efffe0
 8001820:	40468000 	.word	0x40468000
 8001824:	40590000 	.word	0x40590000

08001828 <SHT30_Set_Periodic_Data_Acquisition_Mode>:

void SHT30_Set_Periodic_Data_Acquisition_Mode(uint8_t CMD_MSB, uint8_t CMD_LSB)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	460a      	mov	r2, r1
 8001832:	71fb      	strb	r3, [r7, #7]
 8001834:	4613      	mov	r3, r2
 8001836:	71bb      	strb	r3, [r7, #6]
    SHT30_WriteCommand(CMD_MSB, CMD_LSB);
 8001838:	79ba      	ldrb	r2, [r7, #6]
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff1e 	bl	8001680 <SHT30_WriteCommand>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <HAL_Init+0x28>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	@ (8001874 <HAL_Init+0x28>)
 8001856:	f043 0310 	orr.w	r3, r3, #16
 800185a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 f907 	bl	8001a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001862:	2000      	movs	r0, #0
 8001864:	f000 f808 	bl	8001878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001868:	f7ff fb1e 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40022000 	.word	0x40022000

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <HAL_InitTick+0x54>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_InitTick+0x58>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800188e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f911 	bl	8001abe <HAL_SYSTICK_Config>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00e      	b.n	80018c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d80a      	bhi.n	80018c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f000 f8e7 	bl	8001a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b8:	4a06      	ldr	r2, [pc, #24]	@ (80018d4 <HAL_InitTick+0x5c>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e000      	b.n	80018c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000000 	.word	0x20000000
 80018d0:	200005f8 	.word	0x200005f8
 80018d4:	200005f4 	.word	0x200005f4

080018d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <HAL_IncTick+0x1c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <HAL_IncTick+0x20>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a03      	ldr	r2, [pc, #12]	@ (80018f8 <HAL_IncTick+0x20>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	200005f8 	.word	0x200005f8
 80018f8:	2000066c 	.word	0x2000066c

080018fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b02      	ldr	r3, [pc, #8]	@ (800190c <HAL_GetTick+0x10>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	2000066c 	.word	0x2000066c

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db0a      	blt.n	800199e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	490c      	ldr	r1, [pc, #48]	@ (80019c0 <__NVIC_SetPriority+0x4c>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199c:	e00a      	b.n	80019b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4908      	ldr	r1, [pc, #32]	@ (80019c4 <__NVIC_SetPriority+0x50>)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3b04      	subs	r3, #4
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	761a      	strb	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000e100 	.word	0xe000e100
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	@ 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f1c3 0307 	rsb	r3, r3, #7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	bf28      	it	cs
 80019e6:	2304      	movcs	r3, #4
 80019e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d902      	bls.n	80019f8 <NVIC_EncodePriority+0x30>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	e000      	b.n	80019fa <NVIC_EncodePriority+0x32>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	4313      	orrs	r3, r2
         );
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	@ 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a3c:	d301      	bcc.n	8001a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00f      	b.n	8001a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a42:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <SysTick_Config+0x40>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	f7ff ff90 	bl	8001974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a54:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <SysTick_Config+0x40>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5a:	4b04      	ldr	r3, [pc, #16]	@ (8001a6c <SysTick_Config+0x40>)
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	e000e010 	.word	0xe000e010

08001a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ff49 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a98:	f7ff ff5e 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	6978      	ldr	r0, [r7, #20]
 8001aa4:	f7ff ff90 	bl	80019c8 <NVIC_EncodePriority>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff5f 	bl	8001974 <__NVIC_SetPriority>
}
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffb0 	bl	8001a2c <SysTick_Config>
 8001acc:	4603      	mov	r3, r0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b08b      	sub	sp, #44	@ 0x2c
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aea:	e169      	b.n	8001dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001aec:	2201      	movs	r2, #1
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	f040 8158 	bne.w	8001dba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4a9a      	ldr	r2, [pc, #616]	@ (8001d78 <HAL_GPIO_Init+0x2a0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d05e      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
 8001b14:	4a98      	ldr	r2, [pc, #608]	@ (8001d78 <HAL_GPIO_Init+0x2a0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d875      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b1a:	4a98      	ldr	r2, [pc, #608]	@ (8001d7c <HAL_GPIO_Init+0x2a4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d058      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
 8001b20:	4a96      	ldr	r2, [pc, #600]	@ (8001d7c <HAL_GPIO_Init+0x2a4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d86f      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b26:	4a96      	ldr	r2, [pc, #600]	@ (8001d80 <HAL_GPIO_Init+0x2a8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d052      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
 8001b2c:	4a94      	ldr	r2, [pc, #592]	@ (8001d80 <HAL_GPIO_Init+0x2a8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d869      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b32:	4a94      	ldr	r2, [pc, #592]	@ (8001d84 <HAL_GPIO_Init+0x2ac>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d04c      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
 8001b38:	4a92      	ldr	r2, [pc, #584]	@ (8001d84 <HAL_GPIO_Init+0x2ac>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d863      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b3e:	4a92      	ldr	r2, [pc, #584]	@ (8001d88 <HAL_GPIO_Init+0x2b0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d046      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
 8001b44:	4a90      	ldr	r2, [pc, #576]	@ (8001d88 <HAL_GPIO_Init+0x2b0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d85d      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b4a:	2b12      	cmp	r3, #18
 8001b4c:	d82a      	bhi.n	8001ba4 <HAL_GPIO_Init+0xcc>
 8001b4e:	2b12      	cmp	r3, #18
 8001b50:	d859      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b52:	a201      	add	r2, pc, #4	@ (adr r2, 8001b58 <HAL_GPIO_Init+0x80>)
 8001b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b58:	08001bd3 	.word	0x08001bd3
 8001b5c:	08001bad 	.word	0x08001bad
 8001b60:	08001bbf 	.word	0x08001bbf
 8001b64:	08001c01 	.word	0x08001c01
 8001b68:	08001c07 	.word	0x08001c07
 8001b6c:	08001c07 	.word	0x08001c07
 8001b70:	08001c07 	.word	0x08001c07
 8001b74:	08001c07 	.word	0x08001c07
 8001b78:	08001c07 	.word	0x08001c07
 8001b7c:	08001c07 	.word	0x08001c07
 8001b80:	08001c07 	.word	0x08001c07
 8001b84:	08001c07 	.word	0x08001c07
 8001b88:	08001c07 	.word	0x08001c07
 8001b8c:	08001c07 	.word	0x08001c07
 8001b90:	08001c07 	.word	0x08001c07
 8001b94:	08001c07 	.word	0x08001c07
 8001b98:	08001c07 	.word	0x08001c07
 8001b9c:	08001bb5 	.word	0x08001bb5
 8001ba0:	08001bc9 	.word	0x08001bc9
 8001ba4:	4a79      	ldr	r2, [pc, #484]	@ (8001d8c <HAL_GPIO_Init+0x2b4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d013      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001baa:	e02c      	b.n	8001c06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	623b      	str	r3, [r7, #32]
          break;
 8001bb2:	e029      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	623b      	str	r3, [r7, #32]
          break;
 8001bbc:	e024      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	3308      	adds	r3, #8
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e01f      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	330c      	adds	r3, #12
 8001bce:	623b      	str	r3, [r7, #32]
          break;
 8001bd0:	e01a      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	623b      	str	r3, [r7, #32]
          break;
 8001bde:	e013      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be8:	2308      	movs	r3, #8
 8001bea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	611a      	str	r2, [r3, #16]
          break;
 8001bf2:	e009      	b.n	8001c08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	615a      	str	r2, [r3, #20]
          break;
 8001bfe:	e003      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
          break;
 8001c04:	e000      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          break;
 8001c06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2bff      	cmp	r3, #255	@ 0xff
 8001c0c:	d801      	bhi.n	8001c12 <HAL_GPIO_Init+0x13a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	e001      	b.n	8001c16 <HAL_GPIO_Init+0x13e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3304      	adds	r3, #4
 8001c16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2bff      	cmp	r3, #255	@ 0xff
 8001c1c:	d802      	bhi.n	8001c24 <HAL_GPIO_Init+0x14c>
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0x152>
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	3b08      	subs	r3, #8
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	210f      	movs	r1, #15
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	6a39      	ldr	r1, [r7, #32]
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	431a      	orrs	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80b1 	beq.w	8001dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c58:	4b4d      	ldr	r3, [pc, #308]	@ (8001d90 <HAL_GPIO_Init+0x2b8>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001d90 <HAL_GPIO_Init+0x2b8>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b4a      	ldr	r3, [pc, #296]	@ (8001d90 <HAL_GPIO_Init+0x2b8>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c70:	4a48      	ldr	r2, [pc, #288]	@ (8001d94 <HAL_GPIO_Init+0x2bc>)
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4013      	ands	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a40      	ldr	r2, [pc, #256]	@ (8001d98 <HAL_GPIO_Init+0x2c0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d013      	beq.n	8001cc4 <HAL_GPIO_Init+0x1ec>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d9c <HAL_GPIO_Init+0x2c4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d00d      	beq.n	8001cc0 <HAL_GPIO_Init+0x1e8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a3e      	ldr	r2, [pc, #248]	@ (8001da0 <HAL_GPIO_Init+0x2c8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d007      	beq.n	8001cbc <HAL_GPIO_Init+0x1e4>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a3d      	ldr	r2, [pc, #244]	@ (8001da4 <HAL_GPIO_Init+0x2cc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d101      	bne.n	8001cb8 <HAL_GPIO_Init+0x1e0>
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e006      	b.n	8001cc6 <HAL_GPIO_Init+0x1ee>
 8001cb8:	2304      	movs	r3, #4
 8001cba:	e004      	b.n	8001cc6 <HAL_GPIO_Init+0x1ee>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e002      	b.n	8001cc6 <HAL_GPIO_Init+0x1ee>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_GPIO_Init+0x1ee>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc8:	f002 0203 	and.w	r2, r2, #3
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	4093      	lsls	r3, r2
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cd6:	492f      	ldr	r1, [pc, #188]	@ (8001d94 <HAL_GPIO_Init+0x2bc>)
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d006      	beq.n	8001cfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	492c      	ldr	r1, [pc, #176]	@ (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	4928      	ldr	r1, [pc, #160]	@ (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d18:	4b23      	ldr	r3, [pc, #140]	@ (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	4922      	ldr	r1, [pc, #136]	@ (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60cb      	str	r3, [r1, #12]
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d26:	4b20      	ldr	r3, [pc, #128]	@ (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	491e      	ldr	r1, [pc, #120]	@ (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d40:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4918      	ldr	r1, [pc, #96]	@ (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d4e:	4b16      	ldr	r3, [pc, #88]	@ (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	4914      	ldr	r1, [pc, #80]	@ (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d021      	beq.n	8001dac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d68:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	490e      	ldr	r1, [pc, #56]	@ (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
 8001d74:	e021      	b.n	8001dba <HAL_GPIO_Init+0x2e2>
 8001d76:	bf00      	nop
 8001d78:	10320000 	.word	0x10320000
 8001d7c:	10310000 	.word	0x10310000
 8001d80:	10220000 	.word	0x10220000
 8001d84:	10210000 	.word	0x10210000
 8001d88:	10120000 	.word	0x10120000
 8001d8c:	10110000 	.word	0x10110000
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40010000 	.word	0x40010000
 8001d98:	40010800 	.word	0x40010800
 8001d9c:	40010c00 	.word	0x40010c00
 8001da0:	40011000 	.word	0x40011000
 8001da4:	40011400 	.word	0x40011400
 8001da8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dac:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <HAL_GPIO_Init+0x304>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	4909      	ldr	r1, [pc, #36]	@ (8001ddc <HAL_GPIO_Init+0x304>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f47f ae8e 	bne.w	8001aec <HAL_GPIO_Init+0x14>
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	372c      	adds	r7, #44	@ 0x2c
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	40010400 	.word	0x40010400

08001de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e001      	b.n	8001e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	807b      	strh	r3, [r7, #2]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e1e:	787b      	ldrb	r3, [r7, #1]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e24:	887a      	ldrh	r2, [r7, #2]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e2a:	e003      	b.n	8001e34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e2c:	887b      	ldrh	r3, [r7, #2]
 8001e2e:	041a      	lsls	r2, r3, #16
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	611a      	str	r2, [r3, #16]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e12b      	b.n	80020aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe ff38 	bl	8000cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	@ 0x24
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ea4:	f001 f832 	bl	8002f0c <HAL_RCC_GetPCLK1Freq>
 8001ea8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4a81      	ldr	r2, [pc, #516]	@ (80020b4 <HAL_I2C_Init+0x274>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d807      	bhi.n	8001ec4 <HAL_I2C_Init+0x84>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a80      	ldr	r2, [pc, #512]	@ (80020b8 <HAL_I2C_Init+0x278>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	bf94      	ite	ls
 8001ebc:	2301      	movls	r3, #1
 8001ebe:	2300      	movhi	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e006      	b.n	8001ed2 <HAL_I2C_Init+0x92>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a7d      	ldr	r2, [pc, #500]	@ (80020bc <HAL_I2C_Init+0x27c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	bf94      	ite	ls
 8001ecc:	2301      	movls	r3, #1
 8001ece:	2300      	movhi	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0e7      	b.n	80020aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a78      	ldr	r2, [pc, #480]	@ (80020c0 <HAL_I2C_Init+0x280>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0c9b      	lsrs	r3, r3, #18
 8001ee4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a6a      	ldr	r2, [pc, #424]	@ (80020b4 <HAL_I2C_Init+0x274>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d802      	bhi.n	8001f14 <HAL_I2C_Init+0xd4>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3301      	adds	r3, #1
 8001f12:	e009      	b.n	8001f28 <HAL_I2C_Init+0xe8>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	4a69      	ldr	r2, [pc, #420]	@ (80020c4 <HAL_I2C_Init+0x284>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	099b      	lsrs	r3, r3, #6
 8001f26:	3301      	adds	r3, #1
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	495c      	ldr	r1, [pc, #368]	@ (80020b4 <HAL_I2C_Init+0x274>)
 8001f44:	428b      	cmp	r3, r1
 8001f46:	d819      	bhi.n	8001f7c <HAL_I2C_Init+0x13c>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1e59      	subs	r1, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f56:	1c59      	adds	r1, r3, #1
 8001f58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f5c:	400b      	ands	r3, r1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_I2C_Init+0x138>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1e59      	subs	r1, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f76:	e051      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e04f      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d111      	bne.n	8001fa8 <HAL_I2C_Init+0x168>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1e58      	subs	r0, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	440b      	add	r3, r1
 8001f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e012      	b.n	8001fce <HAL_I2C_Init+0x18e>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e58      	subs	r0, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	0099      	lsls	r1, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Init+0x196>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e022      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10e      	bne.n	8001ffc <HAL_I2C_Init+0x1bc>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e58      	subs	r0, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	440b      	add	r3, r1
 8001fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ffa:	e00f      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1e58      	subs	r0, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	0099      	lsls	r1, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	6809      	ldr	r1, [r1, #0]
 8002020:	4313      	orrs	r3, r2
 8002022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800204a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6911      	ldr	r1, [r2, #16]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68d2      	ldr	r2, [r2, #12]
 8002056:	4311      	orrs	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	430b      	orrs	r3, r1
 800205e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	000186a0 	.word	0x000186a0
 80020b8:	001e847f 	.word	0x001e847f
 80020bc:	003d08ff 	.word	0x003d08ff
 80020c0:	431bde83 	.word	0x431bde83
 80020c4:	10624dd3 	.word	0x10624dd3

080020c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	461a      	mov	r2, r3
 80020d4:	460b      	mov	r3, r1
 80020d6:	817b      	strh	r3, [r7, #10]
 80020d8:	4613      	mov	r3, r2
 80020da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff fc0e 	bl	80018fc <HAL_GetTick>
 80020e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	f040 80e0 	bne.w	80022b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2319      	movs	r3, #25
 80020f6:	2201      	movs	r2, #1
 80020f8:	4970      	ldr	r1, [pc, #448]	@ (80022bc <HAL_I2C_Master_Transmit+0x1f4>)
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f964 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	e0d3      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_I2C_Master_Transmit+0x50>
 8002114:	2302      	movs	r3, #2
 8002116:	e0cc      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d007      	beq.n	800213e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800214c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2221      	movs	r2, #33	@ 0x21
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2210      	movs	r2, #16
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	893a      	ldrh	r2, [r7, #8]
 800216e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4a50      	ldr	r2, [pc, #320]	@ (80022c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800217e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002180:	8979      	ldrh	r1, [r7, #10]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	6a3a      	ldr	r2, [r7, #32]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f89c 	bl	80022c4 <I2C_MasterRequestWrite>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e08d      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021ac:	e066      	b.n	800227c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	6a39      	ldr	r1, [r7, #32]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fa22 	bl	80025fc <I2C_WaitOnTXEFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00d      	beq.n	80021da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d107      	bne.n	80021d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06b      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b04      	cmp	r3, #4
 8002216:	d11b      	bne.n	8002250 <HAL_I2C_Master_Transmit+0x188>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d017      	beq.n	8002250 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	781a      	ldrb	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	6a39      	ldr	r1, [r7, #32]
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fa19 	bl	800268c <I2C_WaitOnBTFFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00d      	beq.n	800227c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002264:	2b04      	cmp	r3, #4
 8002266:	d107      	bne.n	8002278 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002276:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e01a      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002280:	2b00      	cmp	r3, #0
 8002282:	d194      	bne.n	80021ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	e000      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
  }
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	00100002 	.word	0x00100002
 80022c0:	ffff0000 	.word	0xffff0000

080022c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	460b      	mov	r3, r1
 80022d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d006      	beq.n	80022ee <I2C_MasterRequestWrite+0x2a>
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d003      	beq.n	80022ee <I2C_MasterRequestWrite+0x2a>
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022ec:	d108      	bne.n	8002300 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e00b      	b.n	8002318 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002304:	2b12      	cmp	r3, #18
 8002306:	d107      	bne.n	8002318 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002316:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f84f 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00d      	beq.n	800234c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800233e:	d103      	bne.n	8002348 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002346:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e035      	b.n	80023b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002354:	d108      	bne.n	8002368 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002356:	897b      	ldrh	r3, [r7, #10]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002364:	611a      	str	r2, [r3, #16]
 8002366:	e01b      	b.n	80023a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002368:	897b      	ldrh	r3, [r7, #10]
 800236a:	11db      	asrs	r3, r3, #7
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f003 0306 	and.w	r3, r3, #6
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f063 030f 	orn	r3, r3, #15
 8002378:	b2da      	uxtb	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	490e      	ldr	r1, [pc, #56]	@ (80023c0 <I2C_MasterRequestWrite+0xfc>)
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f898 	bl	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e010      	b.n	80023b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002396:	897b      	ldrh	r3, [r7, #10]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4907      	ldr	r1, [pc, #28]	@ (80023c4 <I2C_MasterRequestWrite+0x100>)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f888 	bl	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	00010008 	.word	0x00010008
 80023c4:	00010002 	.word	0x00010002

080023c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d8:	e048      	b.n	800246c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d044      	beq.n	800246c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e2:	f7ff fa8b 	bl	80018fc <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d302      	bcc.n	80023f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d139      	bne.n	800246c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	0c1b      	lsrs	r3, r3, #16
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10d      	bne.n	800241e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	43da      	mvns	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	4013      	ands	r3, r2
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	e00c      	b.n	8002438 <I2C_WaitOnFlagUntilTimeout+0x70>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	43da      	mvns	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4013      	ands	r3, r2
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	429a      	cmp	r2, r3
 800243c:	d116      	bne.n	800246c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e023      	b.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	0c1b      	lsrs	r3, r3, #16
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d10d      	bne.n	8002492 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	43da      	mvns	r2, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4013      	ands	r3, r2
 8002482:	b29b      	uxth	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	e00c      	b.n	80024ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	43da      	mvns	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	4013      	ands	r3, r2
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d093      	beq.n	80023da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024ca:	e071      	b.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024da:	d123      	bne.n	8002524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	f043 0204 	orr.w	r2, r3, #4
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e067      	b.n	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252a:	d041      	beq.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252c:	f7ff f9e6 	bl	80018fc <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	d302      	bcc.n	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d136      	bne.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d10c      	bne.n	8002566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4013      	ands	r3, r2
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf14      	ite	ne
 800255e:	2301      	movne	r3, #1
 8002560:	2300      	moveq	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	e00b      	b.n	800257e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	43da      	mvns	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d016      	beq.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259c:	f043 0220 	orr.w	r2, r3, #32
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e021      	b.n	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	0c1b      	lsrs	r3, r3, #16
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d10c      	bne.n	80025d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	43da      	mvns	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	4013      	ands	r3, r2
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf14      	ite	ne
 80025cc:	2301      	movne	r3, #1
 80025ce:	2300      	moveq	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	e00b      	b.n	80025ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4013      	ands	r3, r2
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bf14      	ite	ne
 80025e6:	2301      	movne	r3, #1
 80025e8:	2300      	moveq	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f af6d 	bne.w	80024cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002608:	e034      	b.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f886 	bl	800271c <I2C_IsAcknowledgeFailed>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e034      	b.n	8002684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d028      	beq.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002622:	f7ff f96b 	bl	80018fc <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	429a      	cmp	r2, r3
 8002630:	d302      	bcc.n	8002638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d11d      	bne.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002642:	2b80      	cmp	r3, #128	@ 0x80
 8002644:	d016      	beq.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e007      	b.n	8002684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800267e:	2b80      	cmp	r3, #128	@ 0x80
 8002680:	d1c3      	bne.n	800260a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002698:	e034      	b.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f83e 	bl	800271c <I2C_IsAcknowledgeFailed>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e034      	b.n	8002714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d028      	beq.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b2:	f7ff f923 	bl	80018fc <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d302      	bcc.n	80026c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d11d      	bne.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d016      	beq.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	f043 0220 	orr.w	r2, r3, #32
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e007      	b.n	8002714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b04      	cmp	r3, #4
 8002710:	d1c3      	bne.n	800269a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002732:	d11b      	bne.n	800276c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800273c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	f043 0204 	orr.w	r2, r3, #4
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e272      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8087 	beq.w	80028a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002798:	4b92      	ldr	r3, [pc, #584]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d00c      	beq.n	80027be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027a4:	4b8f      	ldr	r3, [pc, #572]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d112      	bne.n	80027d6 <HAL_RCC_OscConfig+0x5e>
 80027b0:	4b8c      	ldr	r3, [pc, #560]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027bc:	d10b      	bne.n	80027d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027be:	4b89      	ldr	r3, [pc, #548]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d06c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x12c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d168      	bne.n	80028a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e24c      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x76>
 80027e0:	4b80      	ldr	r3, [pc, #512]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a7f      	ldr	r2, [pc, #508]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	e02e      	b.n	800284c <HAL_RCC_OscConfig+0xd4>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x98>
 80027f6:	4b7b      	ldr	r3, [pc, #492]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a7a      	ldr	r2, [pc, #488]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	4b78      	ldr	r3, [pc, #480]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a77      	ldr	r2, [pc, #476]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002808:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	e01d      	b.n	800284c <HAL_RCC_OscConfig+0xd4>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0xbc>
 800281a:	4b72      	ldr	r3, [pc, #456]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a71      	ldr	r2, [pc, #452]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b6f      	ldr	r3, [pc, #444]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a6e      	ldr	r2, [pc, #440]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e00b      	b.n	800284c <HAL_RCC_OscConfig+0xd4>
 8002834:	4b6b      	ldr	r3, [pc, #428]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a6a      	ldr	r2, [pc, #424]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800283a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b68      	ldr	r3, [pc, #416]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a67      	ldr	r2, [pc, #412]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800284a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7ff f852 	bl	80018fc <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800285c:	f7ff f84e 	bl	80018fc <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	@ 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e200      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b5d      	ldr	r3, [pc, #372]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0xe4>
 800287a:	e014      	b.n	80028a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7ff f83e 	bl	80018fc <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7ff f83a 	bl	80018fc <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	@ 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e1ec      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	4b53      	ldr	r3, [pc, #332]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x10c>
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d063      	beq.n	800297a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028b2:	4b4c      	ldr	r3, [pc, #304]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028be:	4b49      	ldr	r3, [pc, #292]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d11c      	bne.n	8002904 <HAL_RCC_OscConfig+0x18c>
 80028ca:	4b46      	ldr	r3, [pc, #280]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d116      	bne.n	8002904 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	4b43      	ldr	r3, [pc, #268]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_RCC_OscConfig+0x176>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e1c0      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ee:	4b3d      	ldr	r3, [pc, #244]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4939      	ldr	r1, [pc, #228]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002902:	e03a      	b.n	800297a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800290c:	4b36      	ldr	r3, [pc, #216]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002912:	f7fe fff3 	bl	80018fc <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291a:	f7fe ffef 	bl	80018fc <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e1a1      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292c:	4b2d      	ldr	r3, [pc, #180]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002938:	4b2a      	ldr	r3, [pc, #168]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4927      	ldr	r1, [pc, #156]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
 800294c:	e015      	b.n	800297a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294e:	4b26      	ldr	r3, [pc, #152]	@ (80029e8 <HAL_RCC_OscConfig+0x270>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe ffd2 	bl	80018fc <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295c:	f7fe ffce 	bl	80018fc <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e180      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296e:	4b1d      	ldr	r3, [pc, #116]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d03a      	beq.n	80029fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d019      	beq.n	80029c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800298e:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <HAL_RCC_OscConfig+0x274>)
 8002990:	2201      	movs	r2, #1
 8002992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002994:	f7fe ffb2 	bl	80018fc <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299c:	f7fe ffae 	bl	80018fc <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e160      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ae:	4b0d      	ldr	r3, [pc, #52]	@ (80029e4 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029ba:	2001      	movs	r0, #1
 80029bc:	f000 faba 	bl	8002f34 <RCC_Delay>
 80029c0:	e01c      	b.n	80029fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c2:	4b0a      	ldr	r3, [pc, #40]	@ (80029ec <HAL_RCC_OscConfig+0x274>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c8:	f7fe ff98 	bl	80018fc <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ce:	e00f      	b.n	80029f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d0:	f7fe ff94 	bl	80018fc <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d908      	bls.n	80029f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e146      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
 80029e8:	42420000 	.word	0x42420000
 80029ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	4b92      	ldr	r3, [pc, #584]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e9      	bne.n	80029d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80a6 	beq.w	8002b56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0e:	4b8b      	ldr	r3, [pc, #556]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10d      	bne.n	8002a36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	4b88      	ldr	r3, [pc, #544]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	4a87      	ldr	r2, [pc, #540]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a24:	61d3      	str	r3, [r2, #28]
 8002a26:	4b85      	ldr	r3, [pc, #532]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a32:	2301      	movs	r3, #1
 8002a34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	4b82      	ldr	r3, [pc, #520]	@ (8002c40 <HAL_RCC_OscConfig+0x4c8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d118      	bne.n	8002a74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a42:	4b7f      	ldr	r3, [pc, #508]	@ (8002c40 <HAL_RCC_OscConfig+0x4c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a7e      	ldr	r2, [pc, #504]	@ (8002c40 <HAL_RCC_OscConfig+0x4c8>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4e:	f7fe ff55 	bl	80018fc <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a56:	f7fe ff51 	bl	80018fc <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b64      	cmp	r3, #100	@ 0x64
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e103      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a68:	4b75      	ldr	r3, [pc, #468]	@ (8002c40 <HAL_RCC_OscConfig+0x4c8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x312>
 8002a7c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	4a6e      	ldr	r2, [pc, #440]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6213      	str	r3, [r2, #32]
 8002a88:	e02d      	b.n	8002ae6 <HAL_RCC_OscConfig+0x36e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x334>
 8002a92:	4b6a      	ldr	r3, [pc, #424]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	4a69      	ldr	r2, [pc, #420]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	6213      	str	r3, [r2, #32]
 8002a9e:	4b67      	ldr	r3, [pc, #412]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a66      	ldr	r2, [pc, #408]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	f023 0304 	bic.w	r3, r3, #4
 8002aa8:	6213      	str	r3, [r2, #32]
 8002aaa:	e01c      	b.n	8002ae6 <HAL_RCC_OscConfig+0x36e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b05      	cmp	r3, #5
 8002ab2:	d10c      	bne.n	8002ace <HAL_RCC_OscConfig+0x356>
 8002ab4:	4b61      	ldr	r3, [pc, #388]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4a60      	ldr	r2, [pc, #384]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	f043 0304 	orr.w	r3, r3, #4
 8002abe:	6213      	str	r3, [r2, #32]
 8002ac0:	4b5e      	ldr	r3, [pc, #376]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a5d      	ldr	r2, [pc, #372]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	e00b      	b.n	8002ae6 <HAL_RCC_OscConfig+0x36e>
 8002ace:	4b5b      	ldr	r3, [pc, #364]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4a5a      	ldr	r2, [pc, #360]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	6213      	str	r3, [r2, #32]
 8002ada:	4b58      	ldr	r3, [pc, #352]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a57      	ldr	r2, [pc, #348]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	f023 0304 	bic.w	r3, r3, #4
 8002ae4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d015      	beq.n	8002b1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7fe ff05 	bl	80018fc <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fe ff01 	bl	80018fc <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0b1      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ee      	beq.n	8002af6 <HAL_RCC_OscConfig+0x37e>
 8002b18:	e014      	b.n	8002b44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1a:	f7fe feef 	bl	80018fc <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7fe feeb 	bl	80018fc <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e09b      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b38:	4b40      	ldr	r3, [pc, #256]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1ee      	bne.n	8002b22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d105      	bne.n	8002b56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8087 	beq.w	8002c6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b60:	4b36      	ldr	r3, [pc, #216]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d061      	beq.n	8002c30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d146      	bne.n	8002c02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b74:	4b33      	ldr	r3, [pc, #204]	@ (8002c44 <HAL_RCC_OscConfig+0x4cc>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7fe febf 	bl	80018fc <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b82:	f7fe febb 	bl	80018fc <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e06d      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b94:	4b29      	ldr	r3, [pc, #164]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f0      	bne.n	8002b82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba8:	d108      	bne.n	8002bbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002baa:	4b24      	ldr	r3, [pc, #144]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	4921      	ldr	r1, [pc, #132]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a19      	ldr	r1, [r3, #32]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	491b      	ldr	r1, [pc, #108]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c44 <HAL_RCC_OscConfig+0x4cc>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bda:	f7fe fe8f 	bl	80018fc <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be2:	f7fe fe8b 	bl	80018fc <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e03d      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bf4:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x46a>
 8002c00:	e035      	b.n	8002c6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c02:	4b10      	ldr	r3, [pc, #64]	@ (8002c44 <HAL_RCC_OscConfig+0x4cc>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe fe78 	bl	80018fc <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fe fe74 	bl	80018fc <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e026      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c22:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x498>
 8002c2e:	e01e      	b.n	8002c6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d107      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e019      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40007000 	.word	0x40007000
 8002c44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c48:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_RCC_OscConfig+0x500>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d001      	beq.n	8002c6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000

08002c7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0d0      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	4b6a      	ldr	r3, [pc, #424]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d910      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b67      	ldr	r3, [pc, #412]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 0207 	bic.w	r2, r3, #7
 8002ca6:	4965      	ldr	r1, [pc, #404]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b63      	ldr	r3, [pc, #396]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0b8      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd8:	4b59      	ldr	r3, [pc, #356]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4a58      	ldr	r2, [pc, #352]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ce2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf0:	4b53      	ldr	r3, [pc, #332]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4a52      	ldr	r2, [pc, #328]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002cfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cfc:	4b50      	ldr	r3, [pc, #320]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	494d      	ldr	r1, [pc, #308]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d040      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	4b47      	ldr	r3, [pc, #284]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d115      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e07f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3a:	4b41      	ldr	r3, [pc, #260]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e073      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e06b      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5a:	4b39      	ldr	r3, [pc, #228]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4936      	ldr	r1, [pc, #216]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d6c:	f7fe fdc6 	bl	80018fc <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7fe fdc2 	bl	80018fc <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e053      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 020c 	and.w	r2, r3, #12
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1eb      	bne.n	8002d74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b27      	ldr	r3, [pc, #156]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d210      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b24      	ldr	r3, [pc, #144]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 0207 	bic.w	r2, r3, #7
 8002db2:	4922      	ldr	r1, [pc, #136]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b20      	ldr	r3, [pc, #128]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e032      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd8:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4916      	ldr	r1, [pc, #88]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002df6:	4b12      	ldr	r3, [pc, #72]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	490e      	ldr	r1, [pc, #56]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e0a:	f000 f821 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	490a      	ldr	r1, [pc, #40]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1c:	5ccb      	ldrb	r3, [r1, r3]
 8002e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e22:	4a09      	ldr	r2, [pc, #36]	@ (8002e48 <HAL_RCC_ClockConfig+0x1cc>)
 8002e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e26:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <HAL_RCC_ClockConfig+0x1d0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe fd24 	bl	8001878 <HAL_InitTick>

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40022000 	.word	0x40022000
 8002e40:	40021000 	.word	0x40021000
 8002e44:	08002fe0 	.word	0x08002fe0
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	200005f4 	.word	0x200005f4

08002e50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	2300      	movs	r3, #0
 8002e64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d002      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x30>
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d003      	beq.n	8002e86 <HAL_RCC_GetSysClockFreq+0x36>
 8002e7e:	e027      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e80:	4b19      	ldr	r3, [pc, #100]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e82:	613b      	str	r3, [r7, #16]
      break;
 8002e84:	e027      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	0c9b      	lsrs	r3, r3, #18
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	4a17      	ldr	r2, [pc, #92]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e90:	5cd3      	ldrb	r3, [r2, r3]
 8002e92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	0c5b      	lsrs	r3, r3, #17
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	4a11      	ldr	r2, [pc, #68]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eb2:	fb03 f202 	mul.w	r2, r3, r2
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e004      	b.n	8002eca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ec4:	fb02 f303 	mul.w	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	613b      	str	r3, [r7, #16]
      break;
 8002ece:	e002      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ed0:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ed2:	613b      	str	r3, [r7, #16]
      break;
 8002ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ed6:	693b      	ldr	r3, [r7, #16]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	007a1200 	.word	0x007a1200
 8002eec:	08002ff8 	.word	0x08002ff8
 8002ef0:	08003008 	.word	0x08003008
 8002ef4:	003d0900 	.word	0x003d0900

08002ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002efc:	4b02      	ldr	r3, [pc, #8]	@ (8002f08 <HAL_RCC_GetHCLKFreq+0x10>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	20000000 	.word	0x20000000

08002f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f10:	f7ff fff2 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	4903      	ldr	r1, [pc, #12]	@ (8002f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	08002ff0 	.word	0x08002ff0

08002f34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f68 <RCC_Delay+0x34>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <RCC_Delay+0x38>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	0a5b      	lsrs	r3, r3, #9
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
 8002f4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f50:	bf00      	nop
  }
  while (Delay --);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1e5a      	subs	r2, r3, #1
 8002f56:	60fa      	str	r2, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f9      	bne.n	8002f50 <RCC_Delay+0x1c>
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	10624dd3 	.word	0x10624dd3

08002f70 <memset>:
 8002f70:	4603      	mov	r3, r0
 8002f72:	4402      	add	r2, r0
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d100      	bne.n	8002f7a <memset+0xa>
 8002f78:	4770      	bx	lr
 8002f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f7e:	e7f9      	b.n	8002f74 <memset+0x4>

08002f80 <__libc_init_array>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	2600      	movs	r6, #0
 8002f84:	4d0c      	ldr	r5, [pc, #48]	@ (8002fb8 <__libc_init_array+0x38>)
 8002f86:	4c0d      	ldr	r4, [pc, #52]	@ (8002fbc <__libc_init_array+0x3c>)
 8002f88:	1b64      	subs	r4, r4, r5
 8002f8a:	10a4      	asrs	r4, r4, #2
 8002f8c:	42a6      	cmp	r6, r4
 8002f8e:	d109      	bne.n	8002fa4 <__libc_init_array+0x24>
 8002f90:	f000 f81a 	bl	8002fc8 <_init>
 8002f94:	2600      	movs	r6, #0
 8002f96:	4d0a      	ldr	r5, [pc, #40]	@ (8002fc0 <__libc_init_array+0x40>)
 8002f98:	4c0a      	ldr	r4, [pc, #40]	@ (8002fc4 <__libc_init_array+0x44>)
 8002f9a:	1b64      	subs	r4, r4, r5
 8002f9c:	10a4      	asrs	r4, r4, #2
 8002f9e:	42a6      	cmp	r6, r4
 8002fa0:	d105      	bne.n	8002fae <__libc_init_array+0x2e>
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}
 8002fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa8:	4798      	blx	r3
 8002faa:	3601      	adds	r6, #1
 8002fac:	e7ee      	b.n	8002f8c <__libc_init_array+0xc>
 8002fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb2:	4798      	blx	r3
 8002fb4:	3601      	adds	r6, #1
 8002fb6:	e7f2      	b.n	8002f9e <__libc_init_array+0x1e>
 8002fb8:	0800300c 	.word	0x0800300c
 8002fbc:	0800300c 	.word	0x0800300c
 8002fc0:	0800300c 	.word	0x0800300c
 8002fc4:	08003010 	.word	0x08003010

08002fc8 <_init>:
 8002fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fca:	bf00      	nop
 8002fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fce:	bc08      	pop	{r3}
 8002fd0:	469e      	mov	lr, r3
 8002fd2:	4770      	bx	lr

08002fd4 <_fini>:
 8002fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd6:	bf00      	nop
 8002fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fda:	bc08      	pop	{r3}
 8002fdc:	469e      	mov	lr, r3
 8002fde:	4770      	bx	lr
